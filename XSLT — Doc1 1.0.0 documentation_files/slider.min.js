// *************Begin Convention*************** //
// private attributes end with _
// private methods end with _
// string variables begin with s_
// boolean variables begin with b_
// Jquery variables begin with $
// int Variables begin with i_
// object variables begin with o_
// array variables begin with a_
// real (float) variables begin with f_
// variables inside  functions begin with _
// self is always the class instance
// *************End Convention*************** //
if (!window.Slider) {
  window.Slider = {};
}
(function (namespace, $, undefined) {
  var NS = namespace || {};

  var Slider = NS.Slider = function (options) {
    var self = this;
    var $article_ = null;

    self.slider_container_id = "slider_container";
    self.table_layout_class = "layout_table";
    self.diapo_layout_class = "layout_diapo";
    self.normal_container_id = "normal_container";
    //self.available_height = window.screen.height;
    self.available_height = window.innerHeight;

    var a_content_sectioning_tags = ["<address>", "<article>", "<aside>",
      "<footer>",
      "<header>", "<h1>", "<h2>", "<h3>", "<h4>", "<h5>", "<h6>",
      "<hgroup>",
      "<nav>", "<section>"
    ];
    var a_text_contents_tags = ["<blockquote>", "<dd>", "<dir>", "<div>",
      "<dl>", "<dt>", "<figcaption>", "<figure>", "<hr>", "<li>",
      "<main>",
      "<ol>", "<p>", "<pre>", "<ul>"
    ];
    var a_inline_text_tags = ["<a>", "<abbr>", "<b>", "<bdi>", "<bdo>",
      "<br>", "<cite>", "<code>", "<data>", "<dfn>", "<em>", "<i>",
      "<kbd>",
      "<mark>", "<nobr>", "<q>", "<rp>", "<rt>", "<rtc>", "<ruby>", "<s>",
      "<samp>", "<small>", "<span>", "<strong>", "<sub>", "<sup>",
      "<time>",
      "<tt>", "<u>", "<var>", "<wbr>"
    ];
    var a_image_multi_tags = ["<area>", "<audio>", "<img>", "<map>",
      "<track>", "<video>"
    ];
    var a_table_tags = ["<caption>", "<col>", "<colgroup>", "<table>",
      "<tbody>", "<td>", "<tfoot>", "<th>", "<thead>", "<tr>"
    ];
    var a_forms_tags = ["<button>", "<datalist>", "<fieldset>", "<form>",
      "<input>", "<label>", "<legend>", "<meter>", "<optgroup>",
      "<option>",
      "<output>", "<progress>", "<select>", "<textarea>"
    ];

    /** Test if object is null
     * return true if value is not
     * null, undefined, NaN, empty string, 0 and false
     */
    var is_ = function (obj) {
      return (typeof obj != 'undefined' && obj);
    }
    /** Test if object is not null
     * return true if value is
     * null, undefined, NaN, empty string, 0 or false
     */
    var not_ = function (obj) {
      return !is_(obj);
    }

    /** Logging function */
    var log_ = function (name, obj) {
      console.log("=========" + name + "==========")
      console.log(obj);
    }
    var dir_ = function (name, obj) {
      console.log("=========" + name + "==========")
      console.dir(obj);
    }
    var warn_ = function (msg) {
      console.warn(msg);
    }

    // private objects
    self.creator = {};
    self.creator.details = function (text, elt) {
      var wrapper = $("<details/>").append(elt);
      if (text) {
        $("<summary/>").text(text).prependTo(wrapper);
      }
      return wrapper;
    };
    self.creator.article = function (id) {
      return $('<article/>', {
        class: 'slides ' + self.diapo_layout_class,
        id: id
      });
    };
    self.creator.section = function (elts) {
      if (not_(elts)) {
        throw "undefined element";
      };
      var _i_id = $article_.children("section").length;

      var _$wrapper = $("<section/>", {
          class: "slide slide-a",
          id: "id" + _i_id
        })
        .append($("<div/>", {
          class: "slide-n"
        }))
        .append($("<div>", {
            class: "slide-b"
          })
          .append($("<div>", {
            class: "slide-c"
          }).append(elts)));
      return _$wrapper;
    };
    self.creator.sections = function () {
      if ($article_ == null) throw "article is null";
      // variables
      var _o_options = self.options;
      var _s_title_container_selector = _o_options.title_container_selector;
      var _s_main_container_selector = _o_options.main_container_selector;
      // :header get content between headers
      // div.class get content from each div
      var _o_sectionning
      _o_sectionning = _o_options.sectionning;

      // first section or sections
      var _$title, _$content;
      if (_s_title_container_selector) _$title = $(
        _s_title_container_selector);
      // else _$title =  $("h1").first();

      if (_s_main_container_selector) _$content = $(
        _s_main_container_selector);

      if (is_(_$content) && _$content.length && is_(_o_sectionning)) {
        if (_o_sectionning.type == 'parent') _$content = _$content.find(
          _o_sectionning.selector);
        if (_o_sectionning.type == 'sibling') _$content = _$content.find(
          _o_sectionning.selector).parent();
      } else if (is_(_o_sectionning)) {
        if (_o_sectionning.type == 'parent') _$content = $(_o_sectionning
          .selector);
        if (_o_sectionning.type == 'sibling') _$content = $(
          _o_sectionning.selector).parent();
      }


      if (not_(_$title) || !_$title.length) {
        console.warn("Couldn't find a title, proceeding without one");
      }
      if (not_(_$content) || !_$content.length) {
        throw "Couldn't find any content";
      }

      // create a section containing the title
      if (is_(_$title)) {
        $article_.append(self.creator.section(_$title));
      }

      if (is_(_o_sectionning)) {
        if (_o_sectionning.type == 'parent') {
          _$content.each(function (index, _elt) {
            $article_.append(self.creator.section($(_elt).children()));
          });
        }

        if (_o_sectionning.type == 'sibling') {
          _$content.find(_o_sectionning.selector).each(function (index,
            _elt) {
            $article_.append(self.creator.section($(_elt).nextAll().addBack()));
          });
        }
      }

      $article_.children("section").first().addClass("current");
    };
    self.creator.overflow = function () {
      var _o_options = self.options;
      var _a_overflow = _o_options.overflow;
      if (not_(_a_overflow) || _a_overflow.constructor !== String) {
        throw "overflow option problem";
        return false;
      }

      // if auto do nothing
      if (_a_overflow == "auto")
        return $article_.addClass("o_auto");
      if (_a_overflow == "hidden")
        return $article_.addClass("o_hide");

      if (_a_overflow == "resize" || _a_overflow == "box" || _a_overflow ==
        "new") {
        $article_.children("section").each(function () {
          var section = this;
          var next = $(section).next();
          if (section.offsetHeight > self.available_height) {
            if (_a_overflow == "new") {
              self.creator.resize_to_fit_one_slide(section);
            }
            self.creator.solve_overflow(section, _a_overflow);
          }
          self.controller.go_to_slide(next);
        });
        self.controller.go_to_slide($article_.children("section").first());
      } else {
        warn_(_a_overflow + " is not a possible value for overflow");
      }
    };
    // Solve Overflow
    self.creator.solve_overflow = function (section, overflow) {
      var _a_overflowing_elt = [];
      var _$slide_c = $(section).find('div.slide-c').first();
      var _$elements = _$slide_c.children();
      _$elements.each(function (index, el) {
        var clientRec = el.getBoundingClientRect();
        if (clientRec.bottom > self.available_height) {
          _a_overflowing_elt.push({
            elt: el,
            height: clientRec.height
          });
        }
      });

      var _i_number_over_element = _a_overflowing_elt.length;
      if (_i_number_over_element) {
        if (overflow == "new") {
          self.creator.new(section, _$slide_c, _a_overflowing_elt);
        } else if (overflow == "box") {
          self.creator.box(_$slide_c, _a_overflowing_elt);
        } else if (overflow == "resize") {
          self.creator.resize(_$slide_c, _$elements, (self.available_height -
            35));
        }

        // TODO still have problems try to resize
      }
    };
    self.creator.overflow_by_element = function () {
      var _o_options = self.options;
      var _a_overflowing = _o_options.overflowing;
      if (not_(_a_overflowing) || _a_overflowing.constructor !== Array ||
        !_a_overflowing.length) return;
      $article_.children("section").each(function () {
        var section = this;
        if (section.offsetHeight < self.available_height) return;
        var next = $(section).next();
        for (var i = 0; i < _a_overflowing.length; i++) {
          var _type = _a_overflowing[i].type;
          var _selector = _a_overflowing[i].selector;
          if (is_(_type, String) && is_(_selector) && _type.constructor ===
            String && _selector.constructor === String) {
            if (_type != 'resize' && _type != 'box' && _type != 'new' &&
              _type != 'hidden') {
              warn_("overflow type " + _type +
                " is not recognizable, choose between (hidden, box, new, resize)"
              );
              continue;
            }
            self.creator.solve_overflow_by_element(section, _type,
              _selector);
          } else {
            warn_("Problem in overflowing object number " + i);
          }
        }
        self.controller.go_to_slide(next);
      });
      self.controller.go_to_slide($article_.children("section").first());
    };
    self.creator.solve_overflow_by_element = function (section, overflow,
      selector) {
      var _a_overflowing_elt = [];
      var _$elements = $(section).find(selector);
      if (_$elements.length) {
        var _$slide_c = $(section).find('div.slide-c').first();
        _$elements.each(function (index, el) {
          var clientRec = el.getBoundingClientRect();
          if (clientRec.bottom > self.available_height) {
            _a_overflowing_elt.push({
              elt: el,
              height: clientRec.height
            });
            if (overflow == "new") {
              var _i_left_height = self.creator.left_height_after_header_(
                section);
              if (clientRec.height > _i_left_height) {
                $(el).wrap("<div></div>");
                var _$div = $(el).parent();
                self.creator.resize(_$div, el, _i_left_height);
                _a_overflowing_elt[0].elt = _$div[0];
                _a_overflowing_elt[0].height = _$div[0].offsetHeight;
              }
              self.creator.new(section, _$slide_c, _a_overflowing_elt);
            } else if (overflow == "box") {
              self.creator.box(_$slide_c, _a_overflowing_elt);
            } else if (overflow == "resize") {
              var _$elements = _$slide_c.children();
              self.creator.resize(_$slide_c, _$elements, self.available_height -
                35);
            } else if (overflow == "hidden") {
              $(el).css("display", "none");
            }
          }
        });
      }
    };
    /* Description
     * In case overflow is new, eLements which exceeds the size of an entire
     * slide will be resized using css scaling.
     */
    self.creator.resize_to_fit_one_slide = function (section) {
      var _a_overflowing_elt = [];
      var _$slide_c = $(section).find('div.slide-c').first();
      var _$elements = _$slide_c.children();
      _$elements.each(function () {
        if (this.offsetHeight == 0) {
          $(this).remove();
        }
      });
      var _i_height_avail_per_slide = self.creator.left_height_after_header_(
        section);
      _$elements.each(function (index, el) {
        var clientRec = el.getBoundingClientRect();
        if (clientRec.bottom > self.available_height) {
          _a_overflowing_elt.push({
            elt: el,
            height: el.offsetHeight,
            exceed_max: el.offsetHeight >
              _i_height_avail_per_slide
          });
        }
      });

      var _i_number_over_element = _a_overflowing_elt.length;
      if (_i_number_over_element) {
        var _i_left_height = self.creator.left_height_after_header_(
          section);
        for (var i = 0; i < _i_number_over_element; i++) {
          var _o_elt = _a_overflowing_elt[i];
          if (_o_elt.exceed_max) {
            $(_o_elt.elt).wrap("<div></div>");
            var div = $(_o_elt.elt).parent();
            self.creator.resize(div, _o_elt.elt, _i_left_height);
          }
        }
      }
    };
    self.creator.resize = function ($slide_c, elts, left_height) {
      var total_ratio = left_height / $slide_c[0].offsetHeight;
      var width = 100 / total_ratio;
      var div = $("<div/>", {
        style: "transform: scale(" + total_ratio +
          "); transform-origin:top left; width:"+width+"%"
      });
      $slide_c.css("max-height", left_height + "px");
      $slide_c.css("overflow", "hidden");
      div.prependTo($slide_c).append(elts);
    };
    self.creator.box = function (section, elts) {
      var details = $("<details/>", {});
      details.appendTo(section);
      for (var i = 0; i < elts.length; i++) {
        details.append($(elts[i].elt));
      }
    };
    self.creator.new = function (section, $slide_c, elts) {
      // try to find a header
      var _$header = self.find_header_($slide_c);
      var section = self.creator.section(_$header.clone()).insertAfter($(
        section));
      self.controller.go_to_slide(section);
      for (var i = 0; i < elts.length; i++) {
        var _el = elts[i].elt;
        section.find("div.slide-c").append(_el);
        var clientRec = _el.getBoundingClientRect();
        if (clientRec.bottom > self.available_height) {
          section = self.creator.section(_$header.clone()).insertAfter(
            section);
          self.controller.go_to_slide(section);
          section.find("div.slide-c").append(_el);
        }
      }
    };
    self.creator.set_page_number = function () {
      $article_.find("div.slide-n").each(function (i, v) {
        $(this).text(i + 1);
      });
    };
    self.creator.clean = function () {
      $article_.siblings().not("#" + self.normal_container_id).remove();
    };
    self.creator.data = function () {
      $article_.find("section").each(function (i, v) {
        $(this).data("next", $(this).next("article").attr("id"));
        $(this).data("prev", $(this).prev("article").attr("id"));
      });
    };
    self.creator.font_modifier = function (tags) {
      self.font_modifier_(tags);
    };
    self.creator.left_height_after_header_ = function (section) {
      var _$header = $(section).find("div.slide-c").children().first();
      // padding + margin + 5 = 2*15 + 10 + 5 = 45
      if (_$header.is(":header")) {
        return self.available_height - (_$header[0].offsetHeight + 45);
      } else {
        return self.available_height - 45;
      }
    };

    /* keys binding
     * tab to switch between diapo and table mode
     * escape to switch to normal mode
     * configure by modifying options.keys
     */
    self.controller = {};
    // key binding for table mode
    self.controller.table_mode = function () {
      // remove other mode binding
      $(document).off();
      // add new binding
      $(document).bind("keydown", function (event) {
        switch (event.keyCode) {
        case 39: // right arrow
        case 34: // PgDn
          self.controller.next_slide();
          self.controller.animate_scroll_in_table_mode();
          event.preventDefault();
          break;

        case 13: // Enter
        case 32: // space
          self.controller.diapo_mode();
          break;

        case 37: // left arrow
        case 8: // Backspace
        case 33: // PgUp
          self.controller.prev_slide();
          self.controller.animate_scroll_in_table_mode();
          event.preventDefault();
          break;

        case self.options.keys.switch:
          self.controller.diapo_mode();
          event.preventDefault();
          break;

        case 27:
          // todo change mode
          self.controller.off();
          event.preventDefault();
          break;
        }
      });
      $(document).on("click", "#slider_container section", function () {
        self.controller.go_to_slide(this);
        self.controller.diapo_mode();
      });
      // display new mode
      $article_.toggle("fast", function () {
        $article_.removeClass(self.diapo_layout_class);
        $article_.addClass(self.table_layout_class);
      }).toggle("slow", function () {
        self.controller.scroll($("section.current")[0].offsetTop);
      });
      // unbind some other mode elements.
      $("#pSlide").off();
      $("#nSlide").off();
    }
    // key binding for diapo mode
    self.controller.diapo_mode = function () {
      // remove other mode binding
      $(document).off();
      // add new binding
      $(document).bind("keydown", function (event) {
        var tag = event.target.tagName.toLowerCase();
        if (tag == 'input' || tag == 'textarea') return true;
        switch (event.keyCode) {
        case 39: // right arrow
        case 13: // Enter
        case 32: // space
        case 34: // PgDn
          self.controller.next_slide();
          self.controller.scroll_top();
          event.preventDefault();
          break;

        case 37: // left arrow
        case 8: // Backspace
        case 33: // PgUp
          self.controller.prev_slide();
          self.controller.scroll_top();
          event.preventDefault();
          break;

        case self.options.keys.switch:
          self.controller.table_mode();
          event.preventDefault();
          break;
        case 27:
          // todo change mode
          self.controller.off();
          event.preventDefault();
          break;
        }
      });
      $(document).on("click", "#nSlide", function () {
        self.controller.next_slide()
      });
      $(document).on("click", "#pSlide", function () {
        self.controller.prev_slide()
      });

      // display new mode
      //$article_.toggle("fast", function() {
      $article_.addClass(self.diapo_layout_class);
      $article_.removeClass(self.table_layout_class);
      //}).toggle("slow");
      // scroll to top
      self.controller.scroll_top();
    }
    // key binding for console mode
    self.controller.console_mode = function () {
      //TODO console mode
      $("#pSlide").off();
      $("#nSlide").off();
    }
    // key unbinding (normal mode)
    self.controller.off = function () {
      // TODO return to normal mode
      self.restore_body_style_();
      self.restore_normal_mode_();
      $(document).off();
    }
    // next slide diapo mode
    self.controller.next_slide = function () {
      var _$cur = $article_.find("section.current");
      var _$next = _$cur.next("section");
      if (is_(_$next) && _$next.length) {
        _$cur.removeClass("current");
        _$next.addClass("current");
      }
    };
    // next slide diapo mode
    self.controller.prev_slide = function () {
      var _$cur = $article_.find("section.current");
      var _$prev = _$cur.prev("section");
      if (is_(_$prev) && _$prev.length) {
        _$cur.removeClass("current");
        _$prev.addClass("current");
      }
    };
    // go to slide
    self.controller.go_to_slide = function (elt) {
      $article_.find("section.current").removeClass("current");
      $(elt).addClass("current");
    };
    // scroll to
    self.controller.scroll = function (position) {
      $article_.stop().scrollTop(position);
    }
    // scroll stop
    self.controller.scroll_top = function () {
      self.controller.scroll(0);
    }
    // scroll to tab
    self.controller.animate_scroll_in_table_mode = function () {
      var section = $("section.current")[0];
      if ($article_[0].scrollTop + $article_[0].clientHeight < section.offsetTop ||
        $article_[0].scrollTop > section.offsetTop) {
        $article_.stop().animate({
          scrollTop: section.offsetTop - 15
        }, 1000);
      }
    }

    self.private = {};
    self.private.f = function () {
      console.log("this is a private function");
    };

    // public
    self.slider = {
      options: $.extend(self.options, options),
    };

    self.slider.init = function () {
      $article_ = self.creator.article(self.slider_container_id);
      self.save_normal_mode_();
      self.remove_elements_(self.options.element_to_remove);
      self.remove_classes_(self.options.classes_to_remove);
      self.update_body_style_();
      self.creator.font_modifier(a_inline_text_tags);
      self.creator.font_modifier(a_content_sectioning_tags);
      self.creator.font_modifier(a_text_contents_tags);
      self.controller.diapo_mode();
      // TODO to move to a function
      $article_.append($('<div>', {
          id: 'pSlide'
        }))
        .append($('<div>', {
          id: 'nSlide'
        }));
      $article_.prependTo("body");
      self.creator.sections();
      self.creator.clean();
      self.creator.overflow_by_element();
      self.creator.overflow();
      self.creator.data();
      self.creator.set_page_number();
    };

    return self.slider;
  };

  Slider.prototype = {
    constructor: Slider,

    // all this are seen from the Slider functions
    options: {
      // style
      font_size_multiplier: 1.5,
      element_to_remove: ["#navbar", "footer.footer", "div.col-md-3"],
      classes_to_remove: ["col-md-9"],
      // keys binding
      keys: {
        switch: 9
      },
      // sectionning
      sectionning: {
        type: 'sibling',
        selector: ':header'
      },
      // overflow
      overflow: "auto",
      overflowing: [],
    },
    // This will be private
    update_body_style_: function () {
      $("<style>").html(
        "body.slider { padding : 0; margin-top: 0; margin-right: 0; background-color: rgb(0, 0, 0); }"
      ).appendTo("head");
      $("body").addClass("slider");
    },
    remove_elements_: function (selectors) {
      if (!(selectors.constructor === Array))
        throw "remove_elements selectors should be an Array";
      for (var i = 0; i < selectors.length; i = i + 1) {
        $(selectors[i]).remove();
      }
    },
    remove_classes_: function (selectors) {
      if (!(selectors.constructor === Array))
        throw "classes selectors should be an Array";
      for (var i = 0; i < selectors.length; i = i + 1) {
        $("." + selectors[i]).removeClass(selectors[i]);
      }
    },

    get_available_height_: function () {},
    get_elt_height_: function (elt) {
      // total height with margin (should be used for for any element in article)
      return $(elt).outerHeight(true);
    },
    overflow_: function (height) {},
    try_to_solve_overflowing: function (el) {
      var _$el = $(el);

    },

    // font modifier helper
    font_modifier_: function (tags) {
      var self = this;
      var f_table_size_multiplier = 0.4;
      var $stylesheet = $("<style>, {id: slider_stylesheet}");

      if (!(tags.constructor === Array))
        throw "classes selectors should be an Array";

      var s_style = "";
      var $elt, f_font_size, f_size_diapo, f_size_table;
      for (var i = 0; i < tags.length; i = i + 1) {
        $elt = $(tags[i]).appendTo("body");
        f_font_size = parseFloat($elt.css("font-size"), 10);
        $elt.remove();
        f_size_diapo = f_font_size * self.slider.options.font_size_multiplier;
        f_size_table = f_font_size * f_table_size_multiplier;
        s_style += "#" + self.slider_container_id + "." + self.diapo_layout_class +
          " " + $elt[0].tagName + "{font-size: " + f_size_diapo +
          "px;} \n";
        s_style += "#" + self.slider_container_id + "." + self.table_layout_class +
          " " + $elt[0].tagName + "{font-size: " + f_size_table +
          "px;} \n";
      }
      $stylesheet.html(s_style).appendTo("head");
    },

    // normal mode
    save_normal_mode_: function () {
      if ($("#" + this.normal_container_id).length == 0) {
        $("body").find("script").remove();
        $("<div/>", {
          id: this.normal_container_id
        }).text($("body").html()).appendTo("body").css("display",
          "none");
      }
    },
    restore_body_style_: function () {
      $("body").removeClass("slider");
    },
    restore_normal_mode_: function () {
      var self = this;
      $("body").html($("#" + self.normal_container_id).text());
      $(self.options.switch_selector).on("click", function () {
        self.slider.init();
      })
    },

    find_header_: function ($elt) {
      return $elt.find(":header");
    },
    private_method_: function () {
      return null;
    }
  };
  return Slider;
})(window.Slider, jQuery);
